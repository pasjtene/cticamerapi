<?php

namespace AppBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function findUsers($limit = null, $offset = null, $property = null, $order = null, $keyword = null)
    {
        $qb = $this->createQueryBuilder('u');

        if($keyword){
            $qb->orWhere('u.firstName LIKE :keyword OR u.lastName LIKE :keyword OR u.email LIKE :keyword')->orWhere()->orWhere();
            $qb->setParameter('keyword', '%'.$keyword.'%');
        }

        if($property && $order){
            $qb->orderBy('u.'.$property, $order);
        }

        if($limit && $offset){
            return $qb->getQuery()->setMaxResults($limit)->setFirstResult($offset)->getResult();
        }
        return $qb->getQuery()->getResult();
    }


    public function getUsersSearch($data)
    {
        $data['search'] = str_replace(':','',$data['search']);
        $data['search'] = str_replace(' ','',$data['search']);
        $parameters['search']='%'.strtolower(trim($data['search'])).'%';
        $query = $this->createQueryBuilder('u');
        $query->select('u');
        $query->where('LOWER(TRIM( CONCAT(u.firstName , u.lastName ))) like :search or CONCAT( u.firstName , u.lastName ) is null ');
        $query->where('LOWER(TRIM( CONCAT(u.lastName , u.firstName ))) like :search or CONCAT( u.lastName , u.firstName ) is null ');
        $query->orwhere('LOWER(TRIM(u.firstName)) like :search or u.firstName is null ');
        $query->orwhere('LOWER(TRIM(u.lastName)) like :search or u.lastName is null');
        $query->orwhere(' LOWER(TRIM(u.country))  like :search or u.country is null ');
        $query->orwhere(' LOWER(TRIM(u.email))  like :search or u.email is null ');
       // $query->orwhere(' LOWER(TRIM(u.city))  like :search or u.city is null ');
        $query->setParameters($parameters);
        $query->addOrderBy('u.joinDate','desc');
        return $query->getQuery()->getResult();
    }
}
